---
# tasks file for spawner-config

###########################################################################
# If the pre 17w47 style of CAS configuration is being used
# convert it to the new style
- block:

  - name: Create CAS cluster definition file
    template:
      src: "../roles/casserver-config/templates/cluster_defn_vars.yml.j2"
      dest: "{{ orchestration_root }}/cluster_defn_vars.yml"
      mode: 0644
    delegate_to: 127.0.0.1

  - name: include {{ orchestration_root }}/cluster_defn_vars.yml
    include_vars: "{{ orchestration_root }}/cluster_defn_vars.yml"

  when: not ansible_check_mode and CLUSTER_DEFINITIONS is not defined
###########################################################################

###### START - Manage cas host and port change in autoexec_deployment #########
  ###### START - host #########
- name: Set CAS host to user-supplied value
  set_fact:
    controller_host: "{{ sasenv_cas_host }}"
  when: sasenv_cas_host is defined and sasenv_cas_host

- name: Set CAS host
  set_fact:
    controller_host: "{% set cas_host_set = [False] %}{% if CLUSTER_DEFINITIONS is defined and CLUSTER_DEFINITIONS.cas is defined %}{% for key, value in CLUSTER_DEFINITIONS.cas.items() %}{% if not cas_host_set[0] and value.primary_host is defined %}{{ hostvars[value.primary_host].sas_vars.hostname_fqdn }}{% set _ = cas_host_set.append(not cas_host_set.pop()) %}{% endif %}{% endfor %}{% endif %}{% if not cas_host_set[0] %}&SYSTCPIPHOSTNAME{% endif %}"
  when: sasenv_cas_host is not defined or (sasenv_cas_host is defined and not sasenv_cas_host)
  ###### END - host #########

  ###### START - port #########
- name: Set CAS port to user-supplied value
  set_fact:
    controller_port: "{{ sasenv_cas_port }}"
  when: sasenv_cas_port is defined and sasenv_cas_port

- name: Set CAS port to controller port when user has not defined the CAS port to use
  set_fact:
    controller_port: "{% set cas_port_set = [False] %}{% if CLUSTER_DEFINITIONS is defined and CLUSTER_DEFINITIONS.cas is defined %}{% for key, value in CLUSTER_DEFINITIONS.cas.items() %}{% if not cas_port_set[0] and value.primary_host is defined %}{% if value.cas is defined and value.cas.port is defined %}{{ value.cas.port }}{% else %}5570{% endif %}{% set _ = cas_port_set.append(not cas_port_set.pop()) %}{% endif %}{% endfor %}{% endif %}{% if not cas_port_set[0] %}5570{% endif %}"
  when: sasenv_cas_port is not defined or (sasenv_cas_port is defined and not sasenv_cas_port)
  ###### END - port #########

  ###### START - backup host #########
- name: Set CAS backup host
  set_fact:
    controller_backup_host: "{% set cas_host_backup_set = [False] %}{% if CLUSTER_DEFINITIONS is defined and CLUSTER_DEFINITIONS.cas is defined %}{% for key, value in CLUSTER_DEFINITIONS.cas.items() %}{% if not cas_host_backup_set[0] and value.secondary_host is defined and value.secondary_host %}{{ hostvars[value.secondary_host].sas_vars.hostname_fqdn }}{% set _ = cas_host_backup_set.append(not cas_host_backup_set.pop()) %}{% endif %}{% endfor %}{% endif %}"
  when: sasenv_cas_backup_host is not defined or (sasenv_cas_backup_host is defined and not sasenv_cas_backup_host)
  ###### END - backup host #########

# Check that workspaceserver config dir is present
- name: Verify that SAS Workspace Server config directory exists
  stat:
    path: "{{ sas_config_dir + '/workspaceserver/' + INSTANCE_ID | string }}"
  register: workspaceserver_config_dir

- name: Create deployment files for workspaceserver in {{ sas_config_dir + '/workspaceserver/' + INSTANCE_ID | string }}
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ INSTALL_USER }}"
    group: "{{ INSTALL_GROUP }}"
    mode: "{{ item.mode }}"
  become: 'yes'
  become_user: root
  with_items:
    - { src: "autoexec_deployment.sas.j2", dest: "{{ sas_config_dir + '/workspaceserver/' + INSTANCE_ID | string + '/autoexec_deployment.sas' }}", mode: "0644" }
    - { src: "sasenv_deployment.j2", dest: "{{ sas_config_dir + '/workspaceserver/' + INSTANCE_ID | string + '/sasenv_deployment' }}", mode: "0755" }
    - { src: "sasv9_deployment.cfg.j2", dest: "{{ sas_config_dir + '/workspaceserver/' + INSTANCE_ID | string + '/sasv9_deployment.cfg' }}", mode: "0644" }
  when: workspaceserver_config_dir.stat.exists
###### END - Manage cas host and port change in autoexec_usermods #########

###### START - Set spawner port #########
- name: Verify that SAS Spawner config directory exists
  stat:
    path: "{{ sas_config_dir + '/spawner/' + INSTANCE_ID | string }}"
  register: spawner_config_dir

- name: "Edit spawner.cfg and set port to {{ sas_spawner_port | string }}"
  lineinfile:
    dest: "{{ item.source }}"
    line: "{{ item.line }}"
    owner: "{{ INSTALL_USER }}"
    group: "{{ INSTALL_GROUP }}"
    regexp: "{{ item.regexpr }}"
    state: present
    backup: yes
  become: 'yes'
  become_user: root
  with_items:
    - { source: "{{ sas_config_dir + '/spawner/' + INSTANCE_ID | string + '/spawner.cfg' }}", line: "{{ 'sasPort: ' + sas_spawner_port | string }}", regexpr: "sasPort\\s*:\\s*.+$" }
    - { source: "{{ SASROOT + '/' + DEPLOYMENT_ID + '/config/etc/sysconfig/spawner/' + INSTANCE_ID | string + '/sas-spawner' }}", line: "{{ 'export SASOBJSPAWNERPORT=' + sas_spawner_port | string }}", regexpr: "export SASOBJSPAWNERPORT\\s*=\\s*.+$" }
  when: spawner_config_dir.stat.exists
  register: spawnerport
###### END - Set spawner port #########

# Start the spawner service
- name: started {{ SERVICE_NAME }} Service
  become: 'yes'
  become_user: root
  register: service_start
  service: name={{ SERVICE_NAME }} state=started
  when: spawner_config_dir.stat.exists
...
