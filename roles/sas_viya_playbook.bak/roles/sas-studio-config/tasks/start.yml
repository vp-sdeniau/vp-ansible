---
# tasks file for sas-studio-config

- name: Verify that SAS Studio config directory exists
  stat:
    path: "{{ sas_studio_dir }}"
  register: sasstudio

- name: Set the SAS Studio config path when default does not exist
  set_fact:
    sas_studio_dir: "{{ sas_config_dir + '/SASStudio' }}"
  when: sasstudio.stat.isdir is not defined or (sasstudio.stat.isdir is defined and ( sasstudio.stat.isdir | bool ) == false)

- name: Reverify that SAS Studio config directory exists
  stat:
    path: "{{ sas_studio_dir }}"
  register: sasstudio

###### START - Studio configuration #########
# Call template to create appserver_deployment.sh and init_deployment.properties
- name: Create deployment configuration for SAS Studio in {{ sas_studio_dir + '/' + sas_instance | string }}
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ INSTALL_USER }}"
    group: "{{ INSTALL_GROUP }}"
    mode: "{{ item.mode }}"
  become: yes
  become_user: root
  when: sasstudio.stat.exists
  with_items:
    - { src: "appserver_deployment.sh.j2", dest: "{{ sas_studio_dir + '/' + sas_instance | string + '/appserver_deployment.sh' }}", mode: "u=rwx,g=rx,o=rx" }
    - { src: "init_deployment.properties.j2", dest: "{{ sas_studio_dir + '/' + sas_instance | string + '/init_deployment.properties' }}", mode: "u=rw,g=r,o=r" }
###### END - Studio configuration #########

- name: started {{ SERVICE_NAME }} Service
  become: 'yes'
  become_user: root
  register: service_start
  service: name={{ SERVICE_NAME }} state=started
  when: sasstudio.stat.exists
...
