---
- block:
  - name: Verify the presence of the SSH key pair
    become: 'yes'
    become_user: '{{ item }}'
    register: keypair
    stat: path='~{{ item }}/.ssh/{{ KEYNAME }}'
    with_items:
    - '{{ USERS }}'

  - name: Create SSH key pair
    become: 'yes'
    become_user: '{{ item.0 }}'
    shell: '{{ SASHOME }}/SASSecurityCertificateFramework/bin/sas-crypto-management genkey --out-file ~{{ item.0 }}/.ssh/{{ KEYNAME }} --out-form ssh --ssh-pubkey-file ~{{ item.0 }}/.ssh/{{ KEYNAME }}.pub'
    when: (inventory_hostname in COMBINED_GROUP) and (item.1.stat.exists is defined and item.1.stat.exists == false)
    with_together:
    - '{{ USERS }}'
    - '{{ keypair.results }}'

  - name: Run ssh-keyscan for remote hosts
    become: 'yes'
    become_user: '{{ item[0] }}'
    shell: ssh-keygen -R {{ hostvars[item[1]].sas_vars.hostname_fqdn }}; ssh-keyscan {{ hostvars[item[1]].sas_vars.hostname_fqdn }} >> ~{{ item[0] }}/.ssh/known_hosts; ssh-keygen -R {{ hostvars[item[1]].sas_vars.internal_deployment_ipv4 }}; ssh-keyscan {{ hostvars[item[1]].sas_vars.internal_deployment_ipv4 }} >> ~{{ item[0] }}/.ssh/known_hosts
    when: inventory_hostname in COMBINED_GROUP
    with_nested:
    - '{{ USERS }}'
    - '{{ groups[''sas-all''] }}'

  - name: Run ssh-keyscan for localhost
    become: 'yes'
    become_user: '{{ item[0] }}'
    shell: ssh-keygen -R localhost; ssh-keyscan localhost >> ~{{ item[0] }}/.ssh/known_hosts
    when: hostvars[item[1]].sas_vars.hostname_fqdn is not defined and (inventory_hostname in COMBINED_GROUP)
    with_nested:
    - '{{ USERS }}'
    - '{{ groups[''sas-all''] }}'

  - name: Create temporary directory on Ansible machine
    local_action: shell mktemp -d
    run_once: yes
    register: tmpdir

  - name: Fetch public key
    become: 'yes'
    become_user: '{{ item }}'
    fetch: src="~{{ item }}/.ssh/{{ KEYNAME }}.pub" dest="{{ tmpdir.stdout }}/{{ inventory_hostname_short }}/{{ item }}/" flat=yes fail_on_missing=yes
    when: inventory_hostname in COMBINED_GROUP
    with_items:
    - '{{ USERS }}'

  - name: Distribute public key
    become: 'yes'
    become_user: '{{ item[1] }}'
    copy: src="{{ tmpdir.stdout }}/{{ hostvars[item[0]]['inventory_hostname_short'] }}/{{ item[1] }}/{{ KEYNAME }}.pub" dest="~{{ item[1] }}/.ssh/{{ hostvars[item[0]]['inventory_hostname_short'] }}/"
    with_nested:
    - '{{ COMBINED_GROUP }}'
    - '{{ USERS }}'

  - name: Integrate public key
    become: 'yes'
    become_user: '{{ item[1] }}'
    shell: '{{ SASHOME }}/SASSecurityCertificateFramework/bin/sas-crypto-management managetrust --bundle ~{{ item[1] }}/.ssh/authorized_keys --bundle-form ssh-auth-keys add --cert ~{{ item[1] }}/.ssh/{{ hostvars[item[0]][''inventory_hostname_short''] }}/sas_key.pub --force'
    with_nested:
    - '{{ COMBINED_GROUP }}'
    - '{{ USERS }}'

  - name: Clean up temp folder on local machine
    delegate_to: 127.0.0.1
    file: path="{{ tmpdir.stdout }}" state=absent
    run_once: true
  when: not ansible_check_mode and (COMBINED_GROUP | length > 0) and (USERS | length > 0)
